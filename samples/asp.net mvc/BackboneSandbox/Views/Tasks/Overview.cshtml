<!--
    Task Overview: This page simply lists a set of tasks from the backend.
-->

@{
    ViewBag.Title = "Overview";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag.Title</h2>

<div id="task-overview">
    <!-- pretty empty here... the viewmodel 'TaskOverview' will be injected here -->    
</div>

<script type="text/template" id="task-overview-template">

    <!-- in this view template, iterate through each item in the 'tasks' collection-->
    <% _.each(tasks, function(task, i ) { %>
        <span><%= task.Title %></span>
    <% }); %>
    
</script>


@section Scripts{
    <!-- include the basic setup -->
    <script src="@Url.Content("~/assets/scripts/tasks.js")"></script>    
    
    <script>
        
        $(function() {

            // initialize a new TaskList()
            var listOfTasks = new TaskList();
            
            // fetch the items - do note the 'done' callback here;
            // once all the items have been retrieved, initialize the viewmodel (= new instance of "TaskOverview")
            listOfTasks.fetch().done(function() {

                console.log('Fetching of tasks through backend isdone, found amount of items: ' + listOfTasks.length);

                // initialize a new View
                var taskOverview = new TaskOverview({

                    // ... and bind it to the appropriate <div> element; 
                    // note: binding this can also be done in the constructor of TaskOverview, 
                    // but this way is much cleaner and more reusable.
                    el: $("#task-overview"),

                    // also, don't forget to attach the list of dataitems (models) to this view
                    model: listOfTasks

                });
                
            });

            // View object for this page
            TaskOverview = Backbone.View.extend({
            
                // define the *view-template* to be injected
                template: _.template($("#task-overview-template").html()),

                initialize: function () {
                    console.log('Function: initialize()');
                    this.render();
                },
                
                render: function () {
                    console.log('Function: render()');
                    
                    // actually inject the model ("collection") into the view, 
                    // whilst in the process creating a 'tasks' variable for the viewtemplate to use
                    this.$el.html(this.template({tasks:this.model.toJSON()}));
                    return this;
                }
                
            });

        });
        
    </script>
}
